;; -----------------------------------------------------------------------------
;; üìê LineShell.LSP ‚Äì Automatiza creaci√≥n de offsets, cierre, hatch y bloques
;; -----------------------------------------------------------------------------
;; üîß PROP√ìSITO
;; Esta rutina permite al usuario seleccionar l√≠neas o polil√≠neas abiertas, generar
;; autom√°ticamente un contorno cerrado mediante offsets sim√©tricos a ambos lados,
;; a√±adir l√≠neas de cierre en los extremos, unirlos como polil√≠nea cerrada y aplicar
;; un patr√≥n de hatch editable. Tambi√©n permite crear un bloque con todas las
;; entidades generadas, excluyendo las l√≠neas originales.
;;
;; üõ†Ô∏è FUNCIONALIDADES PRINCIPALES
;; 1. Solicita la distancia de offset desde la l√≠nea central.
;; 2. Genera dos offsets equidistantes para cada entidad.
;; 3. Cierra autom√°ticamente los extremos si la entidad no es cerrada.
;; 4. Une las l√≠neas resultantes en una polil√≠nea cerrada lista para hatch.
;; 5. Mueve la l√≠nea original a la capa "Defpoints" (tipo DASHED, color gris).
;; 6. Permite elegir el patr√≥n de hatch desde un desplegable (SOLID, ANSI31, etc).
;; 7. Aplica hatch autom√°tico sobre cada contorno creado (color y capa actuales).
;; 8. Pregunta si desea crear un bloque con todas las entidades nuevas (sin incluir
;;    las l√≠neas originales).
;;
;; üéØ USOS T√çPICOS
;; - Delineaci√≥n r√°pida de canales, ductos, muros, tramos de infraestructura, etc.
;; - Aumentar precisi√≥n visual sin intervenci√≥n manual.
;; - Automatizar sombreados y organizaci√≥n de capas.
;;
;; üß† REQUISITOS
;; - Solo admite selecci√≥n de entidades tipo LINE o LWPOLYLINE.
;; - Offset s√≥lo se aplica a entidades v√°lidas y sin errores de geometr√≠a.
;; - Hatch se aplica √∫nicamente a contornos correctamente cerrados.
;;
;; üë§ AUTOR: Franklin Rodriguez - https://www.linkedin.com/in/franklinrodriguezacosta/
;; üìÖ VERSI√ìN: Julio 2025
;; -----------------------------------------------------------------------------

(princ "\nComando disponible: LineShell")
(princ "\nUso: Escriba LineShell en la l√≠nea de comandos")
(princ)

(defun C:LineShell (/ *error* ss dist enLst newEntList blkName createBlock
                            doc entName obj objType isClosed off1 off2 off1Ent off2Ent
                            p1Start p2Start p1End p2End close1 close2 ssBlock basePt
                            defpointsLayer oldPeditAccept entList joinedEnt contourList
                            hatchPattern applyHatch hatchEnt hatchLayer hatchColor
                            modelSpace hatchObj)
  ;; Carga las extensiones Visual LISP para acceder a m√©todos ActiveX
  (vl-load-com)
  ;; Obtiene el documento activo de AutoCAD
  (setq doc (vla-get-ActiveDocument (vlax-get-acad-object)))
  
  ;;; Funci√≥n de manejo de errores
  ;; Esta funci√≥n se ejecuta si ocurre un error o si el usuario cancela el comando
  (defun *error* (msg)
    ;; Si el mensaje no indica una cancelaci√≥n normal, muestra el error
    (if (not (wcmatch (strcase msg) "*CANCEL*,*QUIT*,*BREAK*"))
      (princ (strcat "\nError: " msg))
    )
    ;; Restaura la variable PEDITACCEPT a su valor original si fue guardada
    (if oldPeditAccept (setvar "PEDITACCEPT" oldPeditAccept))
    ;; Restaura el eco de comandos
    (setvar "CMDECHO" 1)
    ;; Finaliza la marca de deshacer
    (vla-EndUndoMark doc)
    (princ)
  )
  
  ;; Desactiva el eco de comandos para una ejecuci√≥n m√°s limpia
  (setvar "CMDECHO" 0)
  ;; Inicia una marca de deshacer para agrupar todas las operaciones
  (vla-StartUndoMark doc)
  ;; Guarda el valor actual de PEDITACCEPT y lo configura para evitar confirmaciones
  (setq oldPeditAccept (getvar "PEDITACCEPT"))
  (setvar "PEDITACCEPT" 1)  ; Desactiva la confirmaci√≥n de conversi√≥n a polil√≠nea
  ;; Inicializa listas para almacenar contornos cerrados y nuevas entidades
  (setq contourList nil)     ; Lista para contornos cerrados
  (setq newEntList nil)      ; Lista de nuevas entidades creadas
  ;; Obtiene el espacio modelo para agregar hatches posteriormente
  (setq modelSpace (vla-get-ModelSpace doc)) ; Espacio modelo
  
  ;;; Crear o configurar la capa Defpoints
  (setq defpointsLayer "Defpoints")
  (if (not (tblsearch "LAYER" defpointsLayer))
    (progn
      ;; Si la capa no existe, la crea con color gris (8) y tipo de l√≠nea DASHED
      (command "_.-layer" "_M" defpointsLayer "_C" "8" "" "_L" "DASHED" "" "")
      (princ "\nCapa Defpoints creada con color gris 8 y tipo de l√≠nea DASHED.")
    )
    (progn
      ;; Si la capa existe, asegura que tenga las propiedades correctas
      (command "_.-layer" "_S" defpointsLayer "_C" "8" "" "_L" "DASHED" "" "")
    )
  )
  
  ;;; Solicitar selecci√≥n de entidades al usuario
  (princ "\nSeleccione l√≠neas o polil√≠neas: ")
  ;; Permite seleccionar solo l√≠neas y polil√≠neas ligeras
  (setq ss (ssget '((0 . "LINE,LWPOLYLINE"))))
  (if (not ss)
    (progn
      ;; Si no se seleccionan entidades v√°lidas, termina el comando
      (princ "\nNo se seleccionaron entidades v√°lidas.")
      (vla-EndUndoMark doc)
      (setvar "CMDECHO" 1)
      (setvar "PEDITACCEPT" oldPeditAccept)
      (exit)
    )
  )
  
  ;;; Solicitar distancia de offset al usuario
  (setq dist (getdist "\nDistancia de offset (centro ‚Üí un lado): "))
  ;; Asegura que la distancia sea positiva y v√°lida
  (while (or (not dist) (<= dist 0))
    (setq dist (getdist "\nDistancia debe ser positiva: "))
  )
  
  ;; Convierte el conjunto de selecci√≥n en una lista de nombres de entidades
  (setq enLst (vl-remove-if 'listp (mapcar 'cadr (ssnamex ss))))
  
  ;;; Procesar cada entidad seleccionada
  (foreach entName enLst
    ;; Convierte el nombre de entidad a un objeto VLA
    (setq obj (vlax-ename->vla-object entName))
    ;; Obtiene el tipo de objeto (Line o LWPolyline)
    (setq objType (vla-get-ObjectName obj))
    ;; Determina si la entidad est√° cerrada
    (setq isClosed (cond
                    ((= objType "AcDbLine") nil)  ; Las l√≠neas no est√°n cerradas
                    ((= objType "AcDbPolyline") (eq :vlax-true (vla-get-Closed obj)))
                  ))
    
    ;; Verifica si el m√©todo Offset es aplicable al objeto
    (if (vlax-method-applicable-p obj 'Offset)
      (progn
        ;; Crea offsets en ambos lados de la entidad original
        (setq off1 (vl-catch-all-apply 'vla-offset (list obj dist)))
        (setq off2 (vl-catch-all-apply 'vla-offset (list obj (- dist))))
        
        ;; Verifica si los offsets se generaron correctamente
        (if (and (not (vl-catch-all-error-p off1)) (not (vl-catch-all-error-p off2)))
          (progn
            ;; Convierte los resultados de offset a objetos VLA
            (setq off1 (car (vlax-safearray->list (vlax-variant-value off1))))
            (setq off2 (car (vlax-safearray->list (vlax-variant-value off2))))
            
            (if (and off1 off2)
              (progn
                ;; Convierte los objetos VLA a nombres de entidad
                (setq off1Ent (vlax-vla-object->ename off1))
                (setq off2Ent (vlax-vla-object->ename off2))
                ;; Asigna el color cyan a los offsets
                (vla-put-Color off1 4) ; Cyan
                (vla-put-Color off2 4) ; Cyan
                ;; Agrega los offsets a la lista de nuevas entidades
                (setq newEntList (cons off1Ent newEntList))
                (setq newEntList (cons off2Ent newEntList))
                
                ;; Si la entidad no est√° cerrada, crea l√≠neas de cierre
                (if (not isClosed)
                  (progn
                    ;; Obtiene los puntos iniciales y finales de los offsets
                    (setq p1Start (vlax-curve-getStartPoint off1))
                    (setq p2Start (vlax-curve-getStartPoint off2))
                    (setq p1End (vlax-curve-getEndPoint off1))
                    (setq p2End (vlax-curve-getEndPoint off2))
                    
                    ;; Crea l√≠neas de cierre entre los puntos iniciales y finales
                    (command "_.line" "_non" p1Start "_non" p2Start "")
                    (setq close1 (entlast))
                    (command "_.line" "_non" p1End "_non" p2End "")
                    (setq close2 (entlast))
                    
                    ;; Asigna color cyan a las l√≠neas de cierre y las agrega a la lista
                    (if close1 (progn (vla-put-Color (vlax-ename->vla-object close1) 4) (setq newEntList (cons close1 newEntList))))
                    (if close2 (progn (vla-put-Color (vlax-ename->vla-object close2) 4) (setq newEntList (cons close2 newEntList))))
                    
                    ;; Une las entidades para formar un contorno cerrado
                    (if (and off1Ent off2Ent close1 close2)
                      (progn
                        (setq entList (list off1Ent off2Ent close1 close2))
                        (command "_.PEDIT" "_M")
                        (foreach ent entList (command ent))
                        (command "" "_J" "" "")
                        (setq joinedEnt (entlast))
                        (if joinedEnt
                          (progn
                            ;; Elimina las entidades individuales de la lista y agrega la unida
                            (setq newEntList (vl-remove off1Ent newEntList))
                            (setq newEntList (vl-remove off2Ent newEntList))
                            (setq newEntList (vl-remove off1 newEntList))
                            (setq newEntList (vl-remove off2 newEntList))
                            (setq newEntList (cons joinedEnt newEntList))
                            (vla-put-Color (vlax-ename->vla-object joinedEnt) 4)
                            (vla-put-Closed (vlax-ename->vla-object joinedEnt) :vlax-true)
                            ;; Agrega el contorno cerrado a la lista para hatch
                            (setq contourList (cons joinedEnt contourList))
                          )
                        )
                      )
                    )
                  )
                )
                ;; Mueve la entidad original a la capa Defpoints
                (vla-put-Layer obj defpointsLayer)
                (vla-put-Color obj 256) ; Color por capa (BYLAYER)
                (vla-put-Linetype obj "ByLayer")
                (princ (strcat "\nContorno creado para entidad " (itoa (vl-position entName enLst))))
              )
            )
          )
          (princ (strcat "\nError: Offset fallido para entidad " (itoa (vl-position entName enLst))))
        )
      )
      (princ (strcat "\nEntidad no compatible: " (itoa (vl-position entName enLst))))
    )
  )
  
  ;;; Aplicar hatches autom√°ticamente a los contornos cerrados
  (if contourList
    (progn
      (initget "S√≠ No")
      (setq applyHatch (getkword "\n¬øAplicar hatch a los contornos cerrados? [S√≠/No] <S√≠>: "))
      (if (or (null applyHatch) (eq applyHatch "S√≠"))
        (progn
          ;; Men√∫ para seleccionar el patr√≥n de hatch
          (initget "SOLID ANSI31 ANSI37 NET ANGLE")
          (setq hatchPattern (getkword "\nSeleccione patr√≥n de hatch [SOLID/ANSI31/ANSI37/NET/ANGLE] <SOLID>: "))
          (if (not hatchPattern) (setq hatchPattern "SOLID")) ; Patr√≥n por defecto
          
          ;; Configura la capa y el color del hatch
          (setq hatchLayer (getvar "CLAYER"))
          (setq hatchColor 4) ; Cyan
          
          ;; Aplica el hatch a cada contorno cerrado
          (foreach cont contourList
            (setq contObj (vlax-ename->vla-object cont))
            (if (eq :vlax-true (vla-get-Closed contObj))
              (progn
                ;; Crea un objeto hatch en el espacio modelo
                (setq hatchObj (vla-addhatch modelSpace 
                                             acHatchPatternTypePredefined 
                                             hatchPattern 
                                             :vlax-true 
                                             acHatchObject))
                ;; Convierte el contorno a un array seguro para ActiveX
                (setq contArray (vlax-make-safearray vlax-vbObject '(0 . 0)))
                (vlax-safearray-put-element contArray 0 contObj)
                ;; Define el contorno como bucle externo del hatch
                (vla-appendouterloop hatchObj contArray)
                ;; Configura propiedades del hatch
                (vla-put-patternscale hatchObj 1.0)
                (vla-put-patternangle hatchObj 0.0)
                (vla-put-color hatchObj hatchColor)
                (vla-put-layer hatchObj hatchLayer)
                (vla-evaluate hatchObj)
                ;; Agrega el hatch a la lista de nuevas entidades
                (setq hatchEnt (vlax-vla-object->ename hatchObj))
                (setq newEntList (cons hatchEnt newEntList))
              )
            )
          )
          (princ (strcat "\nHatch '" hatchPattern "' aplicado a " (itoa (length contourList)) " contornos."))
        )
      )
    )
  )
  
  ;;; Opci√≥n para crear un bloque con las nuevas entidades
  (if newEntList
    (progn
      (initget "S√≠ No")
      (setq createBlock (getkword "\n¬øCrear bloque con nuevas entidades? [S√≠/No] <No>: "))
      (if (and createBlock (eq createBlock "S√≠"))
        (progn
          ;; Solicita el nombre del bloque y el punto base
          (setq blkName (getstring t "\nNombre del bloque: "))
          (setq basePt (getpoint "\nPunto base de inserci√≥n: "))
          (setq ssBlock (ssadd))
          ;; Agrega todas las nuevas entidades al conjunto de selecci√≥n
          (foreach ent newEntList (ssadd ent ssBlock))
          (command "_.-block" blkName "_non" basePt ssBlock "")
          (princ (strcat "\nBloque '" blkName "' creado con √©xito."))
        )
      )
    )
    (princ "\nAdvertencia: No se crearon nuevas entidades.")
  )
  
  ;;; Finalizar el comando
  (setvar "PEDITACCEPT" oldPeditAccept) ; Restaura el valor original
  (vla-EndUndoMark doc)                 ; Cierra la marca de deshacer
  (setvar "CMDECHO" 1)                  ; Restaura el eco de comandos
  (princ "\nProceso completado.")
  (princ)
)